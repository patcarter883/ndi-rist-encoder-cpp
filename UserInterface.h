// generated by Fast Light User Interface Designer (fluid) version 1.0308

#ifndef UserInterface_h
#define UserInterface_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Button.H>
extern void preview_cb(Fl_Button*, void*);
#include <FL/Fl_Choice.H>
extern void refreshSources_cb(Fl_Button*, void*);
extern void streamSource_cb(Fl_Button*, void*);
extern void streamStandby_cb(Fl_Button*, void*);
extern void select_codec_cb(Fl_Menu_*, void*);
extern void select_encoder_cb(Fl_Menu_*, void*);
#include <FL/Fl_Input.H>
extern void encoder_bitrate_cb(Fl_Input*, void*);
extern void select_transport_cb(Fl_Menu_*, void*);
extern void rist_address_cb(Fl_Input*, void*);
extern void rist_port_cb(Fl_Input*, void*);
extern void rist_buffer_cb(Fl_Input*, void*);
extern void rist_bandwidth_cb(Fl_Input*, void*);
extern void startStream_cb(Fl_Button*, void*);
extern void stopStream_cb(Fl_Button*, void*);
#include <FL/Fl_Output.H>
#include <FL/Fl_Text_Display.H>

class UserInterface {
public:
  UserInterface();
  Fl_Double_Window *mainWindow;
  Fl_Group *inputGroup;
  Fl_Button *previewSourceBtn;
  Fl_Choice *ndiSourceSelect;
  Fl_Button *btnRefreshSources;
  Fl_Group *encodeGroup;
  Fl_Choice *codecSelect;
  static Fl_Menu_Item menu_codecSelect[];
  static Fl_Menu_Item *h264CodecChoice;
  static Fl_Menu_Item *h265CodecChoice;
  static Fl_Menu_Item *av1CodecChoice;
  Fl_Choice *encoderSelect;
  static Fl_Menu_Item menu_encoderSelect[];
  static Fl_Menu_Item *softwareEncoderChoice;
  static Fl_Menu_Item *amdEncoderChoice;
  static Fl_Menu_Item *qsvEncoderChoice;
  static Fl_Menu_Item *nvencEncoderChoice;
  Fl_Input *encoderBitrateInput;
  Fl_Group *transportGroup;
  Fl_Choice *transportSelect;
  static Fl_Menu_Item menu_transportSelect[];
  static Fl_Menu_Item *m2tsTransportChoice;
  static Fl_Menu_Item *rtpTransportChoice;
  Fl_Group *outputGroup;
  Fl_Input *ristAddressInput;
  Fl_Input *ristPortInput;
  Fl_Input *ristBufferInput;
  Fl_Input *ristBandwidthInput;
  Fl_Button *btnStartStream;
  Fl_Button *btnStopStream;
  Fl_Group *statsGroup;
  Fl_Output *bandwidthOutput;
  Fl_Output *linkQualityOutput;
  Fl_Output *retransmittedPacketsOutput;
  Fl_Output *rttOutput;
  Fl_Output *totalPacketsOutput;
  Fl_Output *encodeBitrateOutput;
  Fl_Text_Display *logDisplay;
  Fl_Text_Display *ristLogDisplay;
  void show(int argc, char **argv);
};
#endif
