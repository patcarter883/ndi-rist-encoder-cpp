// generated by Fast Light User Interface Designer (fluid) version 1.0308

#include "UserInterface.h"

Fl_Menu_Item UserInterface::menu_codecSelect[] = {
 {"H264", 0,  (Fl_Callback*)select_codec_cb, (void*)("h264"), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"H265", 0,  (Fl_Callback*)select_codec_cb, (void*)("h265"), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"AV1", 0,  (Fl_Callback*)select_codec_cb, (void*)("av1"), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* UserInterface::h264CodecChoice = UserInterface::menu_codecSelect + 0;
Fl_Menu_Item* UserInterface::h265CodecChoice = UserInterface::menu_codecSelect + 1;
Fl_Menu_Item* UserInterface::av1CodecChoice = UserInterface::menu_codecSelect + 2;

UserInterface::UserInterface() {
  { mainWindow = new Fl_Double_Window(1175, 613, "NDI RIST Encoder");
    mainWindow->user_data((void*)(this));
    { inputGroup = new Fl_Group(25, 25, 266, 199, "Input");
      { previewSourceBtn = new Fl_Button(79, 113, 185, 22, "Preview Source");
        previewSourceBtn->callback((Fl_Callback*)preview_cb);
      } // Fl_Button* previewSourceBtn
      { ndiSourceSelect = new Fl_Choice(119, 53, 140, 22, "NDI Source");
        ndiSourceSelect->down_box(FL_BORDER_BOX);
      } // Fl_Choice* ndiSourceSelect
      { btnRefreshSources = new Fl_Button(79, 83, 185, 22, "Refresh Sources");
        btnRefreshSources->callback((Fl_Callback*)refreshSources_cb);
      } // Fl_Button* btnRefreshSources
      { Fl_Button* o = new Fl_Button(78, 164, 190, 21, "Stream Source");
        o->callback((Fl_Callback*)streamSource_cb);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(78, 193, 190, 22, "Stream Standby");
        o->callback((Fl_Callback*)streamStandby_cb);
      } // Fl_Button* o
      inputGroup->end();
    } // Fl_Group* inputGroup
    { encodeGroup = new Fl_Group(280, 23, 250, 192, "Encode");
      { codecSelect = new Fl_Choice(359, 48, 92, 22, "Codec");
        codecSelect->down_box(FL_BORDER_BOX);
        codecSelect->menu(menu_codecSelect);
      } // Fl_Choice* codecSelect
      encodeGroup->end();
    } // Fl_Group* encodeGroup
    { outputGroup = new Fl_Group(520, 20, 266, 195, "Output");
      { ristAddressInput = new Fl_Input(568, 47, 218, 22, "Address");
        ristAddressInput->callback((Fl_Callback*)rist_address_cb);
      } // Fl_Input* ristAddressInput
      { ristPortInput = new Fl_Input(568, 77, 92, 22, "Port");
        ristPortInput->callback((Fl_Callback*)rist_port_cb);
      } // Fl_Input* ristPortInput
      { ristBufferInput = new Fl_Input(568, 107, 92, 22, "Buffer");
        ristBufferInput->callback((Fl_Callback*)rist_buffer_cb);
      } // Fl_Input* ristBufferInput
      { ristBandwidthInput = new Fl_Input(568, 137, 92, 22, "Bandwidth");
        ristBandwidthInput->callback((Fl_Callback*)rist_bandwidth_cb);
      } // Fl_Input* ristBandwidthInput
      { btnStartStream = new Fl_Button(568, 167, 218, 22, "Start Stream");
        btnStartStream->callback((Fl_Callback*)startStream_cb);
      } // Fl_Button* btnStartStream
      { btnStopStream = new Fl_Button(568, 193, 218, 22, "Stop Stream");
        btnStopStream->callback((Fl_Callback*)stopStream_cb);
        btnStopStream->deactivate();
      } // Fl_Button* btnStopStream
      outputGroup->end();
    } // Fl_Group* outputGroup
    { statsGroup = new Fl_Group(845, 20, 266, 195, "Stats");
      { bitrateOutput = new Fl_Output(940, 45, 165, 24, "Bitrate");
      } // Fl_Output* bitrateOutput
      { linkQualityOutput = new Fl_Output(940, 71, 165, 24, "Link Quality");
      } // Fl_Output* linkQualityOutput
      { recoveredPacketsOutput = new Fl_Output(940, 96, 165, 24, "Recovered Packets");
      } // Fl_Output* recoveredPacketsOutput
      { rttOutput = new Fl_Output(940, 121, 165, 24, "RTT");
      } // Fl_Output* rttOutput
      statsGroup->end();
    } // Fl_Group* statsGroup
    { logDisplay = new Fl_Text_Display(25, 242, 1132, 164, "Log");
    } // Fl_Text_Display* logDisplay
    { ristLogDisplay = new Fl_Text_Display(26, 431, 1132, 164, "RIST Log");
    } // Fl_Text_Display* ristLogDisplay
    mainWindow->end();
    mainWindow->resizable(mainWindow);
  } // Fl_Double_Window* mainWindow
}

void UserInterface::show(int argc, char **argv) {
  mainWindow->show(argc, argv);
}
