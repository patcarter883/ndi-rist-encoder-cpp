# data file for the Fltk User Interface Designer (fluid)
version 1.0308
header_name {.h}
code_name {.cxx}
decl {\#include "common.h"} {selected public global
}

class UserInterface {open
} {
  Function {UserInterface()} {open
  } {
    Fl_Window mainWindow {
      label {NDI RIST Encoder} open
      xywh {582 190 1330 610} type Double resizable visible
    } {
      Fl_Menu_Bar topMenu {open
        xywh {0 0 1330 20}
      } {
        MenuItem saveSettingsMenuItem {
          label {Save Settings}
          callback save_settings_cb
          xywh {0 0 30 20}
        }
        MenuItem loadSettingsMenuItem {
          label {Load Settings}
          callback load_settings_cb
          xywh {0 0 100 20}
        }
      }
      Fl_Group inputGroup {
        label Input
        xywh {35 41 235 99}
      } {
        Fl_Choice ndiSourceSelect {
          label {NDI Source}
          xywh {104 48 140 22} down_box BORDER_BOX
        } {}
        Fl_Button btnRefreshSources {
          label {Refresh Sources}
          callback refreshSources_cb
          xywh {64 78 185 22}
        }
      }
      Fl_Group encodeGroup {
        label Encode
        xywh {26 154 249 97}
      } {
        Fl_Choice codecSelect {
          label Codec open
          xywh {140 159 92 22} down_box BORDER_BOX
        } {
          MenuItem h264CodecChoice {
            label H264
            user_data {Codec::h264}
            callback select_codec_cb
            xywh {0 0 100 20}
          }
          MenuItem h265CodecChoice {
            label H265
            user_data {Codec::h265}
            callback select_codec_cb
            xywh {0 0 100 20}
          }
          MenuItem av1CodecChoice {
            label AV1
            user_data {Codec::av1}
            callback select_codec_cb
            xywh {0 0 100 20}
          }
        }
        Fl_Choice encoderSelect {
          label Encoder open
          xywh {141 184 92 22} down_box BORDER_BOX
        } {
          MenuItem softwareEncoderChoice {
            label Software
            user_data {Encoder::software}
            callback select_encoder_cb
            xywh {10 10 100 20}
          }
          MenuItem amdEncoderChoice {
            label AMD
            user_data {Encoder::amd}
            callback select_encoder_cb
            xywh {10 10 100 20}
          }
          MenuItem qsvEncoderChoice {
            label {Intel QSV}
            user_data {Encoder::qsv}
            callback select_encoder_cb
            xywh {10 10 100 20}
          }
          MenuItem nvencEncoderChoice {
            label {Nvidia NVENC}
            user_data {Encoder::nvenc}
            callback select_encoder_cb
            xywh {20 20 100 20}
          }
        }
        Fl_Input encoderBitrateInput {
          label {Video Bitrate}
          callback encoder_bitrate_cb
          xywh {141 207 90 24}
        }
      }
      Fl_Group {} {
        label Output
        xywh {385 41 225 157}
      } {
        Fl_Input ristAddressInput {
          label {RIST Address}
          callback rist_address_cb
          xywh {390 41 218 22}
        }
        Fl_Input rtmpAddressInput {
          label {RTMP Server}
          callback rtmp_address_cb
          xywh {390 68 218 22}
        }
        Fl_Input rtmpKeyInput {
          label {RTMP Key}
          callback rtmp_key_cb
          xywh {390 96 218 22}
        }
        Fl_Check_Button useRpcInput {
          label {Use server remote control.}
          callback use_rpc_cb
          xywh {390 153 25 25} down_box DOWN_BOX
        }
        Fl_Check_Button upscaleInput {
          label Upscale
          callback upscale_cb
          xywh {390 173 25 25} down_box DOWN_BOX
        }
        Fl_Input reencodeBitrateInput {
          label {Reencode Bitrate}
          callback reencodeBitrate_cb
          xywh {390 123 220 25}
        }
      }
      Fl_Group {} {
        label {RIST Settings}
        xywh {765 41 95 149}
      } {
        Fl_Input ristBandwidthInput {
          label Bandwidth
          callback rist_bandwidth_cb
          xywh {765 41 92 22}
        }
        Fl_Input ristBufferMinInput {
          label {Buffer Min}
          callback rist_buffer_min_cb
          xywh {765 66 92 22}
        }
        Fl_Input ristBufferMaxInput {
          label {Buffer Max}
          callback rist_buffer_max_cb
          xywh {765 91 92 22}
        }
        Fl_Input ristRttMinInput {
          label {RTT Min}
          callback rist_rtt_min_cb
          xywh {765 116 92 22}
        }
        Fl_Input ristRttMaxInput {
          label {RTT Max}
          callback rist_rtt_max_cb
          xywh {765 141 92 22}
        }
        Fl_Input ristReorderBufferInput {
          label {Reorder Buffer}
          callback rist_reorder_buffer_cb
          xywh {765 166 92 22}
        }
      }
      Fl_Button btnStartStream {
        label {Start Stream}
        callback startStream_cb
        xywh {610 214 218 22}
      }
      Fl_Button btnStopStream {
        label {Stop Stream}
        callback stopStream_cb
        xywh {335 214 218 22} deactivate
      }
      Fl_Group statsGroup {
        label Stats open
        xywh {1040 41 266 200}
      } {
        Fl_Output bandwidthOutput {
          label Bandwidth
          xywh {1135 66 165 24}
        }
        Fl_Output linkQualityOutput {
          label {Link Quality}
          xywh {1135 92 165 24}
        }
        Fl_Output retransmittedPacketsOutput {
          label {Retransmitted Packets}
          xywh {1135 117 165 24}
        }
        Fl_Output rttOutput {
          label RTT
          xywh {1135 167 165 24}
        }
        Fl_Output totalPacketsOutput {
          label Packets
          xywh {1135 142 165 24}
        }
        Fl_Output encodeBitrateOutput {
          label {Encode Bitrate}
          xywh {1135 217 165 24}
        }
      }
      Fl_Text_Display logDisplay {
        label Log
        xywh {21 257 1294 168}
      }
      Fl_Text_Display ristLogDisplay {
        label {RIST Log}
        xywh {22 442 1293 163}
      }
    }
  }
  Function {show(int argc, char **argv)} {} {
    code {mainWindow->show(argc, argv);} {}
  }
}
